%% Function principal  du devoir 4
function [tps fTrain Itrain] = Devoir4(vtrainkmh, fAvion)
global c_son
global v_avion
global r_avion
global i_son
global r_train

%%% Donnees sur l'avion
v_avion = transpose(300 * [cos(pi/18) 0 sin(pi/18)]) / 3.6; %m/s
r_avion = transpose([0 0 0]);
i_son = 160; %dB

%%% Donnees sur le train
r_train = transpose([10 10 0]) * 1000; %m
v_train= vtrainkmh / 3.6;

%%% Donnees sur l'air et le son
phi = 10; %centrigrade
c_son = (331.3 + 0.606 * phi); % m/s



% Calcul de l'intensite au au temps t= 0
d = (r_train + v_train * t) - (r_avion + v_avion * t);
r_0 = norm(d);
u_initial = d / norm(d);

currentIntensity = i_son - norm(d) / 1000 * A(fAvion) - 20 * log10(norm(d) / r_0);

t = 0;
delta_t = 1;
% Iterate while the intensity is greater than or egal to 20 dB
while currentIntensity >= 20
    
    d = (r_train + v_train * t) - (r_avion + v_avion * t);
    u = d / norm(d);
    
    currentIntensity = i_son - norm(d) / 1000 * A(fAvion) - 20 * log10(norm(d) / r_0);
    
    if currentIntensity >= 20
        Itrain(t + 1) = currentIntensity;
        currentFrequency = fAvion * (c_son - dot(v_train, u))/(c_son - dot(v_avion, u));
        fTrain(t + 1) = currentFrequency;
    end
    % Each time, add delta_t to the current time
    t = t + delta_t;
end
q_initial = [transpose(r_train); transpose(r_avion)];
d = pdist(q_initial, 'euclidean');
tps = d / (c_son - dot(v_train, u_initial));

end

%% Coeficient de viscosite
function coef_viscosite = A(v)
coef_viscosite = 0.8 + 0.0041 * v; % dB/km
end

